# Makefile - pre-build makefile for VxWorks system call layer
#
# Copyright 2013, 2015-2016, 2019 Wind River Systems, Inc.
#
# The right to copy, distribute, modify or otherwise make use
# of this software may be licensed only pursuant to the terms
# of an applicable Wind River license agreement.
#
# modification history
# --------------------
# 14may19,yat  changed scgen to tclsh scgen.tcl
# 01feb19,wyt  add RISC-V support (VXWPG-213)
# 31jan19,l_z  move static syscall library to libc for x86_64 (V7PRO-5243)
# 20apr16,h_k  added arm-64le for ARM64 Little-Endian. (F5261)
# 18apr16,pee  added support for certRtp.o
# 22oct15,pad  Prevent the invocation of scgen for VxWorks CERT and instead
#              copy required items for the system call infrastructure
#              (US69446).
# 03mar16,pee  add directory dependency to avoid race condition
# 21feb15,mze  fix logic ppc64 so simulators still work (F2518)
# 10feb15,my_  do not copy syscall for ppc64 (F2518)
# 01oct13,pad  created.

include $(WIND_KRNL_MK)/defs.library.mk

MKDIR         = mkdir -p

# Until all the architectures and variants are harmonized in terms of where
# in the VSB they expect to see the system call stubs, we have to resort to
# a bit of file transfer in some cases...

ifdef _WRS_CONFIG_CERT_RTP_OBJECT
SCGEN_SYSCALL_STUBS_LOCATION = $(VSB_DIR)/usr/lib/common/objcert/objcertRtp
else
SCGEN_SYSCALL_STUBS_LOCATION = $(VSB_DIR)/usr/lib/common/objc
endif
VARIANT_LOC = $(notdir $(LIBDIRBASE))
ifneq ($(VARIANT_LOC), common)
COPY_STUBS_TO_VARIANT_LOC = TRUE
EXPECTED_SYSCALL_STUBS_LOCATION = $(VSB_DIR)/usr/lib/$(VARIANT_LOC)/objc
else
EXPECTED_SYSCALL_STUBS_LOCATION = $(VSB_DIR)/usr/lib/common/objc
endif

LAYER_SYSCALL_DEF = ../syscall_defs/syscallUsrApi.def \
                    ../syscall_defs/syscallUsrNum.def

ifdef _WRS_CONFIG_CERT
# For VxWorks CERT the system call infrastructure is not generated by scgen;
# it is static. The header files and system call stubs are located in the
# syscall layer and copied over into the usual locations of the VSB so that
# the rest of the build process can stay identical between CERT and GPP.

CERT_SC_HDR = ../../vxworks/cert
CERT_SC_ARCH_HDR = ../../vxworks/cert/arch/$(ARCH_DIR)
CERT_SC_STUBS = ../../vxworks/cert/cert_syscall_stubs
endif

# Refer the file declaring the system call argument structures as a way to know
# whether scgen must be called.

SYSCALLARG_GEN = $(VSB_KERNEL_PUBLIC_INCLUDE_DIR)/arch/vsb_gen_syscallArgs.h

# Set the specifications appropriate for the architecture

ifeq ($(VX_CPU_FAMILY), arm)
ifdef _WRS_CONFIG_LP64
SCGEN_SPECS = arm-64le ARMARCH8A arm
COPY_STUBS_TO_VARIANT_LOC = FALSE
EXPECTED_SYSCALL_STUBS_LOCATION = $(VSB_DIR)/usr/lib/common/objc
else
SCGEN_SPECS = arm ARMARCH5 arm
endif
endif

ifeq ($(VX_CPU_FAMILY), ppc)
ifdef _WRS_CONFIG_LP64
SCGEN_SPECS = ppc-64 PPC ppc
COPY_STUBS_TO_VARIANT_LOC = FALSE
EXPECTED_SYSCALL_STUBS_LOCATION = $(VSB_DIR)/usr/lib/common/objc
else
SCGEN_SPECS = ppc PPC ppc
endif
endif

ifeq ($(VX_CPU_FAMILY), pentium)
ifdef _WRS_CONFIG_LP64
SCGEN_SPECS = x86-64 CORE i86 gnu
else
SCGEN_SPECS = x86 PENTIUM i86
endif
endif

ifeq ($(VX_CPU_FAMILY), simlinux)
ifdef _WRS_CONFIG_LP64
SCGEN_SPECS = x86-64 SIMLINUX simlinux gnu
else
SCGEN_SPECS = x86 SIMLINUX simlinux
endif
endif

ifeq ($(VX_CPU_FAMILY), simpc)
ifdef _WRS_CONFIG_LP64
SCGEN_SPECS = x86-64 SIMNT simnt gnu
else
SCGEN_SPECS = x86 SIMNT simnt
endif
endif

ifeq ($(VX_CPU_FAMILY), riscv)
ifdef _WRS_CONFIG_LP64
SCGEN_SPECS = riscv-64 RISCV riscv
COPY_STUBS_TO_VARIANT_LOC = FALSE
EXPECTED_SYSCALL_STUBS_LOCATION = $(VSB_DIR)/usr/lib/common/objc
else
SCGEN_SPECS = riscv RISCV riscv
endif
endif

.PHONY : interface clean_interface

interface : $(SYSCALLARG_GEN)

clean_interface :
	$(RM) $(SYSCALLARG_GEN)

release : interface

lib : interface

clean : clean_interface

$(sort $(EXPECTED_SYSCALL_STUBS_LOCATION) $(SCGEN_SYSCALL_STUBS_LOCATION)) :
	-$(MKDIR) $@

$(SYSCALLARG_GEN) : $(LAYER_SYSCALL_DEF) | $(sort $(EXPECTED_SYSCALL_STUBS_LOCATION) $(SCGEN_SYSCALL_STUBS_LOCATION))
ifndef _WRS_CONFIG_CERT
	tclsh $(WIND_BUILD)/mk/tcl/scgen.tcl -a $(SCGEN_SPECS) -v $(VSB_DIR)
else
	$(CP) $(CERT_SC_HDR)/syscall.h $(VSB_DIR)/usr/h
	$(CP) $(CERT_SC_HDR)/syscall.h $(VSB_DIR)/krnl/h/public
	$(CP) $(CERT_SC_HDR)/syscallTbl.h $(VSB_DIR)/krnl/h/public
	$(CP) $(CERT_SC_ARCH_HDR)/vsb_gen_syscallArgs.h $(VSB_DIR)/krnl/h/public/arch
	$(CP) $(CERT_SC_STUBS)/*.s $(SCGEN_SYSCALL_STUBS_LOCATION)
endif
	@if [ "$(COPY_STUBS_TO_VARIANT_LOC)" = "TRUE" ] ; \
	then $(MV) $(SCGEN_SYSCALL_STUBS_LOCATION)/*      \
	           $(EXPECTED_SYSCALL_STUBS_LOCATION) ;   \
	fi

# empty targets. Required by build system
precomp:

# default empty target

% :
	@echo nothing to be done for target $@

include $(WIND_KRNL_MK)/rules.library.mk
